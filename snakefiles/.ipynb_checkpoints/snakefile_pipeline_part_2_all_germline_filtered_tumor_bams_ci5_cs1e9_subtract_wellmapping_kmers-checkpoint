import pandas as pd
from pathlib import Path
import os

paramspace = pd.read_csv("data/metadata/paramspace_cfDNA_phaseI.csv", index_col='cfDNA_folder')
cfDNA_FILE_PATHS = paramspace["cfDNA_bam_path"]
UNIQUE_KMERS_PATHS = paramspace["unique_kmers_folder"]
SAMPLES = paramspace["pt_id"]
FOLDERS = paramspace.index

INTERSECTION_PLOTDATA_FILTERED = expand("data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/plotdata_intersection_filtered.txt", zip, pt = SAMPLES, output_f = FOLDERS)
#DUMP_INTERSECTION = expand("data/{pt_dump_int}/{output_f_dump_int}/all_germline_filtered_bams_tumor_ci5_cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect.txt", zip, pt_dump_int = SAMPLES, output_f_dump_int = FOLDERS)


RATIOS = expand("data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/big_ratio.csv", zip, pt = SAMPLES, output_f = FOLDERS)
SMALL_RATIOS = expand("data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/small_ratio.csv", zip, pt = SAMPLES, output_f = FOLDERS)




rule all: 
    input: INTERSECTION_PLOTDATA_FILTERED, RATIOS, SMALL_RATIOS


###################### INTERSECT WITH UNIQUE TUMOR K-MERS ######################
rule intersect_cfDNA_unique_tumor_all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted:
    input:
        unique_tumor_kmers = lambda wildcards: str("data/" + str(wildcards.pt) + "/" + str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) +  "/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/unique_tumor_kmers.kmc_pre"),
        cfDNA_kmers = "data/{pt}/{output_f}/cs1e9/cfDNA_kmers_cs1e9.kmc_pre"
    output: 
        intersections_pre = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/cfDNA_kmers_unique_tumor_kmers_intersect.kmc_pre", 
        intersections_suf = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/cfDNA_kmers_unique_tumor_kmers_intersect.kmc_suf"
    resources: 
        mem_mb = 100000, 
        time = "5:00:00"
    params: 
        unique_tumor_kmers_file = lambda wildcards: str("data/" + str(wildcards.pt) + "/" + str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) +  "/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/unique_tumor_kmers")
    conda: 
        "envs/ctDNA.yml"
    shell:
        "kmc_tools simple data/{wildcards.pt}/{wildcards.output_f}/cs1e9/cfDNA_kmers_cs1e9 -ci0 -cx1000000000 {params.unique_tumor_kmers_file} -ci0 -cx1000000000 intersect data/{wildcards.pt}/{wildcards.output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/cfDNA_kmers_unique_tumor_kmers_intersect -ci0 -cs1000000000 -cx1000000000 -ocleft" 


###################### PLOT HISTOGRAM ######################

rule make_plotfile_intersection_all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted:
    input: 
        intersection_pre = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/cfDNA_kmers_unique_tumor_kmers_intersect.kmc_pre",
        intersection_suf = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/cfDNA_kmers_unique_tumor_kmers_intersect.kmc_suf"
    output: 
        plotdata = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/plotdata_intersection.txt"
    resources: 
        mem_mb = 200000, 
        time = "2:00:00"
    conda:
        "envs/ctDNA.yml"
    shell: 
        "kmc_tools transform data/{wildcards.pt}/{wildcards.output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/cfDNA_kmers_unique_tumor_kmers_intersect -ci0 -cx1000000000 histogram {output.plotdata} -ci0 -cx1000000000"


rule filter_plotfile_intersection_all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted:
    input:
        plotdata = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/plotdata_intersection.txt"
    output: 
        plotdata_filtered = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/plotdata_intersection_filtered.txt"
    resources: 
        mem_mb = 100000, 
        time = "2:00:00"
    conda:
        "envs/ctDNA.yml"
    shell: 
        "awk -F '\t' '$2!=0' {input.plotdata} > {output.plotdata_filtered}"
        
        
###################### CALCULATE RATIO ######################

rule calculate_big_ratio_all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted:
    input: 
        intersection = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/plotdata_intersection_filtered.txt",
        all_cfDNA = "data/{pt}/{output_f}/cs1e9/plotdata_cfDNA_cs1e9_filtered.txt",
        unique_tumor = lambda wildcards: str("data/{pt}/" + str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) + "/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/plotdata_unique_tumor_kmers_filtered.txt"),
        all_tumor = lambda wildcards: str("data/{pt}/" + str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) + "/all_germline_filtered_bams_tumor_ci5_cs1e9/plotdata_tumor_filtered.txt")
    output: 
        ratio = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/big_ratio.csv"
    resources: 
        mem_mb = 200000, 
        time = "2:00:00"
    conda: 
        "envs/r4base.yml"
    script:
        "calculate_ratio.R"
        
        
rule calculate_small_ratio_all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted:
    input: 
        intersection = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/plotdata_intersection_filtered.txt",
        unique_tumor = lambda wildcards: str("data/{pt}/" + str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) + "/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/plotdata_unique_tumor_kmers_filtered.txt")
    output: 
        ratio = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9_well_mapping_subtracted/small_ratio.csv"
    resources: 
        mem_mb = 200000, 
        time = "2:00:00"
    conda: 
        "envs/ctDNA.yml"
    script:
        "calculate_ratio_small.R"
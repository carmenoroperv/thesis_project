#Description: this snakefile will take the output of the first part of the pipeline (the unique k-mers from the tumor that do not appear in the germline) and intersect it with the k-mers from the ctDNA samples in the same patient as the tumor samples stems from. Before that, the k-mers in each ctDNA sample will be counted. In the end, the ratio of (unique tumor kmers found in the cfDNA sample/all cfDNA follow-up k-mers)/(unique tumor k-mers/all tumor k-mers). 
#we also create a histogram after the intersection of the unique tumor k-mers and the cfDNA k-mers 

import pandas as pd
from pathlib import Path
import os

paramspace = pd.read_csv("data/metadata/paramspace_cfDNA_phaseI.csv", index_col='cfDNA_folder')
cfDNA_FILE_PATHS = paramspace["cfDNA_bam_path"]
UNIQUE_KMERS_PATHS = paramspace["unique_kmers_folder"]
SAMPLES = paramspace["pt_id"]
FOLDERS = paramspace.index


OUTPUT_cfDNA_KMERS = expand("data/{pt_cfdna_count}/{output_f_cfdna_count}/cs1e9/cfDNA_kmers_cs1e9.kmc_pre", zip, pt_cfdna_count = SAMPLES, output_f_cfdna_count = FOLDERS)
HISTOGRAM_INTERSECTION = expand("data/{pt_hist}/{output_f_hist}/cs1e9/histogram_intersection_cs1e9.png", zip, pt_hist = SAMPLES, output_f_hist = FOLDERS)
DUMP_INTERSECTION = expand("data/{pt_dump_int}/{output_f_dump_int}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9.txt", zip, pt_dump_int = SAMPLES, output_f_dump_int = FOLDERS)
FILTERED_CFDNA = expand("data/{pt_filtered}/{output_f_filtered}/cs1e9/plotdata_cfDNA_cs1e9_filtered.txt", zip, pt_filtered = SAMPLES, output_f_filtered = FOLDERS)
#use the folder as a wildcard name? 
# we need all folder that have cfDNA from each patient folder, then cd into that and get the bam file
#They have given the file the same name in each folder for the same patient
RATIOS = expand("data/{pt}/{output_f}/cs1e9/big_ratio_cs1e9.csv", zip, pt = SAMPLES, output_f = FOLDERS)
SMALL_RATIOS = expand("data/{pt}/{output_f}/cs1e9/small_ratio_cs1e9.csv", zip, pt = SAMPLES, output_f = FOLDERS)


for pt, fd in zip(SAMPLES, FOLDERS):
    tmp_folder = "tmp_cfDNA_cs1e9/tmp_cfDNA_" + str(pt) + "/" + str(fd)  + "/"
    Path(tmp_folder).mkdir(parents=True, exist_ok=True)
    
    output_folder = "data/" + str(pt) + "/" + str(fd)  + "/"
    Path(output_folder).mkdir(parents=True, exist_ok=True)

rule all: 
    input: OUTPUT_cfDNA_KMERS, HISTOGRAM_INTERSECTION, DUMP_INTERSECTION, RATIOS, SMALL_RATIOS, FILTERED_CFDNA


#RATIOS

######COUNT cfDNA K-MERS###############

rule count_cfDNA_kmers_cs1e9:
    input:
        bam_file = lambda wildcards: str(Path(cfDNA_FILE_PATHS[wildcards.output_f_cfdna_count]))
    output: 
        kmers_pre = "data/{pt_cfdna_count}/{output_f_cfdna_count}/cs1e9/cfDNA_kmers_cs1e9.kmc_pre", 
        kmers_suf = "data/{pt_cfdna_count}/{output_f_cfdna_count}/cs1e9/cfDNA_kmers_cs1e9.kmc_suf"
    threads: 1
    params:
        tmpdir = "tmp_cfDNA_cs1e9/tmp_cfDNA_{pt_cfdna_count}/{output_f_cfdna_count}/"
    conda: 
        "envs/ctDNA.yml"
    shell:
        'kmc -k50 -m300 -t{threads} -ci0 -cs1000000000 -cx1000000000 -fbam {input.bam_file} data/{wildcards.pt_cfdna_count}/{wildcards.output_f_cfdna_count}/cs1e9/cfDNA_kmers_cs1e9 {params.tmpdir}' #remember to have a tmp folder in the directory where we are working

# 2>&1 >> {log.log_f}

rule make_plotfile_cfDNA_cs1e9:
    input: 
        kmers_pre = "data/{pt}/{output_f}/cs1e9/cfDNA_kmers_cs1e9.kmc_pre",
        kmers_suf = "data/{pt}/{output_f}/cs1e9/cfDNA_kmers_cs1e9.kmc_suf"
    output: 
        plotdata = "data/{pt}/{output_f}/cs1e9/plotdata_cfDNA_cs1e9.txt"
    conda:
        "envs/ctDNA.yml"
    shell: 
        'kmc_tools transform data/{wildcards.pt}/{wildcards.output_f}/cs1e9/cfDNA_kmers_cs1e9 -ci0 -cx1000000000 histogram {output.plotdata} -ci0 -cx1000000000'
        

rule filter_plotfile_cfDNA_cs1e9:
    input:
        plotdata = "data/{pt_filtered}/{output_f_filtered}/cs1e9/plotdata_cfDNA_cs1e9.txt"
    output: 
        plotdata_filtered = "data/{pt_filtered}/{output_f_filtered}/cs1e9/plotdata_cfDNA_cs1e9_filtered.txt"
    resources: 
        mem_mb = 100000, 
        time = "2:00:00"
    conda:
        "envs/ctDNA.yml"
    shell: 
        "awk -F '\t' '$2!=0' {input.plotdata} > {output.plotdata_filtered}"    

###INTERSECT WITH UNIQUE TUMOR K-MERS##
rule intersect_cfDNA_unique_tumor_cs1e9:
    input:
        unique_tumor_kmers = lambda wildcards: str("data/" + str(wildcards.pt) + "/" +  str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) +  "/cs1e9/unique_tumor_kmers_cs1e9.kmc_pre"),
        cfDNA_kmers = "data/{pt}/{output_f}/cs1e9/cfDNA_kmers_cs1e9.kmc_pre"
    output: 
        intersections_pre = "data/{pt}/{output_f}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9.kmc_pre", 
        intersections_suf = "data/{pt}/{output_f}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9.kmc_suf"
    params: 
        unique_tumor_kmers_file = lambda wildcards: str("data/" + str(wildcards.pt) + "/" +  str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) +  "/cs1e9/unique_tumor_kmers_cs1e9")
    conda: 
        "envs/ctDNA.yml"
    shell:
        "kmc_tools simple data/{wildcards.pt}/{wildcards.output_f}/cs1e9/cfDNA_kmers_cs1e9 -ci0 -cx1000000000 {params.unique_tumor_kmers_file} -ci0 -cx1000000000 intersect data/{wildcards.pt}/{wildcards.output_f}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9 -ci0 -cs1000000000 -cx1000000000 -ocleft" 


#######PLOT HISTOGRAM##################

rule make_plotfile_intersection_cs1e9:
    input: 
        intersection_pre = "data/{pt}/{output_f}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9.kmc_pre"
    output: 
        plotdata = "data/{pt}/{output_f}/cs1e9/plotdata_intersection_cs1e9.txt"
    conda:
        "envs/ctDNA.yml"
    shell: 
        "kmc_tools transform data/{wildcards.pt}/{wildcards.output_f}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9 -ci0 -cx1000000000 histogram {output.plotdata} -ci0 -cx1000000000"

        
rule filter_plotfile_intersection_cs1e9:
    input: 
        plotdata = "data/{pt}/{output_f}/cs1e9/plotdata_intersection_cs1e9.txt"
    output: 
        plotdata_filtered = "data/{pt}/{output_f}/cs1e9/plotdata_intersection_cs1e9_filtered.txt"
    conda:
        "envs/ctDNA.yml"
    shell: 
        "awk -F '\t' '$2!=0' {input.plotdata} > {output.plotdata_filtered}"
        
rule make_plot_intersection_cs1e9:
    input:
        input_filename = "data/{pt_hist}/{output_f_hist}/cs1e9/plotdata_intersection_cs1e9_filtered.txt"
    output: 
        output_filename = "data/{pt_hist}/{output_f_hist}/cs1e9/histogram_intersection_cs1e9.png"
    conda: 
        "envs/ctDNA.yml"
    script:
        "histogram_plots.R"

rule dump_intersection_cs1e9:
    input: 
        intersection_pre = "data/{pt_dump_int}/{output_f_dump_int}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9.kmc_pre",
        intersection_suf = "data/{pt_dump_int}/{output_f_dump_int}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9.kmc_suf"
    output: 
        plotdata = "data/{pt_dump_int}/{output_f_dump_int}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9.txt"
    conda:
        "envs/ctDNA.yml"
    shell: 
        "kmc_tools transform data/{wildcards.pt_dump_int}/{wildcards.output_f_dump_int}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9 -ci0 -cx1000000000 dump data/{wildcards.pt_dump_int}/{wildcards.output_f_dump_int}/cs1e9/cfDNA_kmers_unique_tumor_kmers_intersect_cs1e9.txt -ci0 -cs1000000000 -cx1000000000"



###########CALCULATE RATIO#############

rule calculate_big_ratio_cs1e9:
    input: 
        intersection = "data/{pt}/{output_f}/cs1e9/plotdata_intersection_cs1e9.txt",
        all_cfDNA = "data/{pt}/{output_f}/cs1e9/plotdata_cfDNA_cs1e9.txt",
        unique_tumor = lambda wildcards: str("data/{pt}/" + str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) + "/cs1e9/plotdata_unique_tumor_cs1e9.txt"),
        all_tumor = lambda wildcards: str("data/{pt}/" + str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) + "/cs1e9/plotdata_tumor_cs1e9.txt")
    output: 
        ratio = "data/{pt}/{output_f}/cs1e9/big_ratio_cs1e9.csv" #This should be a csv with just one position where it saves the ratio for the specific sample
    conda: 
        "envs/r4base.yml"
    script:
        "calculate_ratio.R"


rule calculate_small_ratio_cs1e9:
    input: 
        intersection = "data/{pt}/{output_f}/cs1e9/plotdata_intersection_cs1e9.txt",
        unique_tumor = lambda wildcards: str("data/{pt}/" + str(Path(UNIQUE_KMERS_PATHS[wildcards.output_f])) + "/cs1e9/plotdata_unique_tumor_cs1e9.txt")
    output: 
        ratio = "data/{pt}/{output_f}/cs1e9/small_ratio_cs1e9.csv" #This should be a csv with just one position where it saves the ratio for the specific sample
    conda: 
        "envs/ctDNA.yml"
    script:
        "calculate_ratio_small.R"

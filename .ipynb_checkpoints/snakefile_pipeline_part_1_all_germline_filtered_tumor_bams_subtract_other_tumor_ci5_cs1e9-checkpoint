#Description: this file will take as input the raw patient data and make the k-mer count for both the tumor and the germline for each patient. Then it will subtract it, so that we have the unique k-mers that are only in the cancer for each patients and save those. 
#This file will exclude singletons from the beginning,  excluding kmers that are 4 or fewer (ci5) from the tumor (but do not exclude them from germline)


import pandas as pd
from pathlib import Path
import os

####MAKE THE TMP FOLDER WITH WILDCARD NAME!

paramspace = pd.read_csv("data/metadata/paramspace_phaseI.csv", index_col='pt_id')
TUMOR_FILES = paramspace["tumor_bam_path"]
GERMLINE_FILES = paramspace["germline_bam_path"]
SAMPLES = paramspace.index
OUTPUT_PT_FOLDER = paramspace["output_path_unique_kmers"]


OUTPUT_SUBTRACTED = expand("data/{pt}/{output_f}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/unique_tumor_kmers_subtracted_final.kmc_pre", zip, pt=SAMPLES, output_f = OUTPUT_PT_FOLDER)

UNIQUE_HISTOGRAM = expand("data/{pt_unique_plot}/{output_f_unique_plot}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/histogram_unique_tumor_kmers.png", zip, pt_unique_plot=SAMPLES, output_f_unique_plot = OUTPUT_PT_FOLDER)

for pt, fd in zip(SAMPLES, OUTPUT_PT_FOLDER):
    tmp_folder_tumor = "tmp_tumor/tmp_tumor_" + str(pt) + "/" + str(fd)  + "_filtered_bams_tumor_ci4_cs1e9/"
    Path(tmp_folder_tumor).mkdir(parents=True, exist_ok=True)
    
    #tmp_folder_healthy = "tmp_normal/tmp_normal_" + str(pt) + "/" + str(fd)  + "_filtered_bams_tumor_ci4_cs1e9/"
    #Path(tmp_folder_healthy).mkdir(parents=True, exist_ok=True)
    
    output_folder = "data/" + str(pt) + "/" + str(fd)  + "/"
    Path(output_folder).mkdir(parents=True, exist_ok=True)



def other_pt_folder_lists(wildcards):
    # could be written more cleanly with a dictionary
    patient = wildcards.pt
    output_folder = wildcards.output_f
    other_patients =  [x for x in SAMPLES if x != patient]
    other_folders =  [x for x in OUTPUT_PT_FOLDER if x != output_folder]
    print(f"Patient: {patient}")
    print(f"Output folder: {output_folder}")
    print(f"Other patients: {other_patients}")
    
    output_list = []
    for index, (other_pt, other_fd) in enumerate(zip(other_patients, other_folders)):
        if index != len(other_patients) -1: 
            output_list.append((other_pt, other_fd, f"data/{patient}/{output_folder}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/unique_tumor_kmers_substractions/unique_tumor_kmers_subtracted_{index}"))
        else: 
            output_list.append((other_pt, other_fd, f"data/{patient}/{output_folder}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/unique_tumor_kmers_subtracted_final"))
    return output_list    
    

rule all: 
    input: OUTPUT_SUBTRACTED, UNIQUE_HISTOGRAM

    
#########################################################################

rule subtract_tumor_other_tumors_all_germline_filtered_tumor_bams_subtract_other_tumor_ci5_cs1e9:
    input:
        unique_tumor_kmers_pre = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9/unique_tumor_kmers.kmc_pre",
        unique_tumor_kmers_suf = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_ci5_cs1e9/unique_tumor_kmers.kmc_suf"
    output: 
        final_subtracted = "data/{pt}/{output_f}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/unique_tumor_kmers_subtracted_final.kmc_pre"
    threads: 1
    params: 
        pt = "{pt}",
        output_f = "{output_f}",
        others_list = other_pt_folder_lists
    conda: 
        "envs/ctDNA.yml"
    script:
        "unique_tumor_subtract.py"
        


#########################################################################

####PLOTS###########
rule make_plotfile_unique_tumor_all_germline_filtered_tumor_bams_subtract_other_tumor_ci5_cs1e9:
    input: 
        kmers_pre = "data/{pt_unique_plot}/{output_f_unique_plot}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/unique_tumor_kmers_subtracted_final.kmc_pre"
    output: 
        plotdata = "data/{pt_unique_plot}/{output_f_unique_plot}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/plotdata_unique_tumor_kmers.txt"
    conda:
        "envs/ctDNA.yml"
    shell: 
        "kmc_tools transform data/{wildcards.pt_unique_plot}/{wildcards.output_f_unique_plot}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/unique_tumor_kmers_subtracted_final -ci0 -cx1000000000 histogram {output.plotdata} -ci0 -cx1000000000"
        #"kmc_scripts/kmers_transform.py"


rule filter_plotfile_unique_tumor_all_germline_filtered_tumor_bams_subtract_other_tumor_ci5_cs1e9:
    input:
        plotdata = "data/{pt_unique_plot}/{output_f_unique_plot}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/plotdata_unique_tumor_kmers.txt"
    output: 
        plotdata_filtered = "data/{pt_unique_plot}/{output_f_unique_plot}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/plotdata_unique_tumor_kmers_filtered.txt"
    conda:
        "envs/ctDNA.yml"
    shell: 
        "awk -F '\t' '$2!=0' {input.plotdata} > {output.plotdata_filtered}"

rule make_plot_unique_tumor_all_germline_filtered_tumor_bams_subtract_other_tumor_ci5_cs1e9:
    input: 
        input_filename = "data/{pt_unique_plot}/{output_f_unique_plot}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/plotdata_unique_tumor_kmers_filtered.txt"
    output: 
        output_filename = "data/{pt_unique_plot}/{output_f_unique_plot}/all_germline_filtered_bams_tumor_subtract_other_tumor_ci5_cs1e9/histogram_unique_tumor_kmers.png"
    conda: 
        "envs/ctDNA.yml"
    script:
        "histogram_plots.R"

